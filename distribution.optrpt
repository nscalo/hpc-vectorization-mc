Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.210 Build 20180410

Compiler options: /c /Qopt-report=5 /QaxMIC-AVX512 /Qopenmp /Qopenmp-simd /Qmkl /o:distribution.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -Qinline-factor: 100
  -Qinline-min-size: 30
  -Qinline-max-size: 230
  -Qinline-max-total-size: 2000
  -Qinline-max-per-routine: 10000
  -Qinline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.


Begin optimization report for: dist_func.._simdsimd3__xmm4nvv(float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dist_func.._simdsimd3__xmm4nvv(float, float)) [1/1=100.0%] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46)
  -> EXTERN: (6,20) sinf(float)
  -> EXTERN: (6,35) expf(float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]

remark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector) 
remark #15305: vectorization support: vector length 4
remark #15475: --- begin vector cost summary ---
remark #15482: vectorized math library calls: 2 
remark #15488: --- end vector cost summary ---

    Report from: Code generation optimizations [cg]

Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46):remark #34051: REGISTER ALLOCATION : [?dist_func@@YAMMM@Z._simdsimd3__xmm4nvv] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   16[ rbx rbp r10-r15 xmm8-xmm15]
        Assigned     :    4[ zmm0-zmm1 zmm6-zmm7]
        
    Routine temporaries
        Total         :      31
            Global    :      20
            Local     :      11
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dist_func.._simdsimd3__xmm4mvv(float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dist_func.._simdsimd3__xmm4mvv(float, float)) [1/1=100.0%] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46)
  -> EXTERN: (6,20) sinf(float)
  -> EXTERN: (6,35) expf(float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]

remark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, masked, formal parameter types: (vector,vector) 
remark #15305: vectorization support: vector length 4
remark #15475: --- begin vector cost summary ---
remark #15482: vectorized math library calls: 2 
remark #15488: --- end vector cost summary ---

    Report from: Code generation optimizations [cg]

Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46):remark #34051: REGISTER ALLOCATION : [?dist_func@@YAMMM@Z._simdsimd3__xmm4mvv] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   16[ rbx rbp r10-r15 xmm8-xmm15]
        Assigned     :    7[ rax zmm0-zmm2 zmm6-zmm8]
        
    Routine temporaries
        Total         :      40
            Global    :      23
            Local     :      17
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       1 [1.00e+000 ~ 1.9%]
            Writes    :       1 [1.00e+000 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dist_func(float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dist_func(float, float)) [1/1=100.0%] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46)
  -> EXTERN: (6,20) sinf(float)
  -> EXTERN: (6,35) expf(float)


    Report from: Code generation optimizations [cg]

Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc(5,46):remark #34051: REGISTER ALLOCATION : [?dist_func@@YAMMM@Z] Y:\Courses\Parallelism on Intel Architecture\Assignments\vectorization-mc\distribution.cc:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ zmm0-zmm1 zmm13-zmm14]
        
    Routine temporaries
        Total         :      33
            Global    :      22
            Local     :      11
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       2 [2.00e+000 ~ 5.1%]
            Writes    :       2 [2.00e+000 ~ 5.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
